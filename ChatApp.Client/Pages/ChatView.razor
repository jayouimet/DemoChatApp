@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@attribute [Authorize]

@inject ApiServices ApiServices
@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthStateProvider
@inject IMapper Mapper

<MudContainer Class="mt-4">
    <MudText Typo="Typo.h4" Style="margin-bottom: 0.5em">Welcome</MudText>
    <MudGrid GutterSize="3">
        <MudItem xs="12" md="4">
            <UserListComponent OnUserSelected="HandleUserSelected" Users="_users.Where(user => Users.Any(x => x.Id == user.Id)).ToList()"/>
        </MudItem>
        <MudItem xs="12" md="8">
            <ChatComponent SelectedUser="_selectedUser" Messages="_messages" OnSendMessage="HandleSendMessage"/>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    public ICollection<UserDto> Users = new HashSet<UserDto>();
    private UserDto? _selectedUser;
    
    private List<UserDto> _users = new List<UserDto>();
    private List<MessageDto> _messages = new List<MessageDto>();

    private HubConnection? _hubConnection;
    
    private async Task HandleSendMessage(string message)
    {
        if (!string.IsNullOrWhiteSpace(message) && _hubConnection is not null && _selectedUser is not null)
        {
            await _hubConnection.SendAsync(nameof(IChatHubServer.SendMessage), new MessageDto{ ToUserId = _selectedUser.Id, Content = message});
        }
    }
    
    private async Task HandleUserSelected(UserDto userDto)
    {
        _selectedUser = userDto;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var apiResponse = await ApiServices.User.Get();
        if (apiResponse.Success)
            _users = apiResponse.Data!.ToList();

        _hubConnection = ConfigureHubConnection();
        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync(nameof(IChatHubServer.ConnectUser), Mapper.Map<UserDto>(await AuthStateProvider.GetConnectedUserAsync()));
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder().WithUrl(
            new Uri("https://localhost:7126/hubs/chat"),
            options =>
            {
                options.AccessTokenProvider = () => AuthStateProvider.GetAccessToken();
            }
            ).Build();

        hubConnection.On<UserDto>(nameof(IChatHubClient.UserConnected), (user) =>
        {
            Users.Add(user);
            StateHasChanged();
        });
        
        hubConnection.On<IEnumerable<UserDto>>(nameof(IChatHubClient.ConnectedUsersList), (users) =>
        {
            Users = users.ToList();
            StateHasChanged();
        });

        hubConnection.On<MessageDto>(nameof(IChatHubClient.OnMessageSent), (message) =>
        {
            _messages.Add(message);
            StateHasChanged();
        });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}