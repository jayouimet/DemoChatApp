@rendermode InteractiveWebAssembly

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject AuthStateProvider AuthStateProvider

@using ChatApp.Client.Stores
@inject IState<MessageListState> MessageListState
@inject IDispatcher Dispatcher

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Chat</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (SelectedUser is null)
        {
            <MudText Typo="Typo.h6">Select a user to connect to the chat...</MudText>
        }
        else 
        {
            if (MessageListState.Value.IsLoading)
            {
                <MudText Typo="Typo.h6">Loading...</MudText>
            }
            else
            {
                @foreach (var message in MessageListState.Value.Data)
                {
                    <MudChat ChatPosition="(message.ToUserId == SelectedUser.Id) ? ChatBubblePosition.End : ChatBubblePosition.Start">
                        <MudChatBubble>
                            @message.Content
                        </MudChatBubble>
                    </MudChat>
                }
            }
        }
    </MudCardContent>
    <MudCardActions Class="pa-2">
        <MudTextField @bind-Value="_message" Placeholder="Type your message..." FullWidth="true" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendMessage" Class="ml-2">
            Send
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public UserDto? SelectedUser { get; set; }
    private long? _previousUserId;
    
    [Parameter]
    public EventCallback<string> OnSendMessage { get; set; }

    private string _message = string.Empty;

    private async Task SendMessage()
    {
        await OnSendMessage.InvokeAsync(_message);
        _message = string.Empty;
    }
    
    protected override void OnParametersSet()
    {
        if (SelectedUser is not null && SelectedUser.Id != _previousUserId)
        {
            Dispatcher.Dispatch(new FetchMessageListAction(SelectedUser.Id));
            _previousUserId = SelectedUser.Id;
        }
    }
}